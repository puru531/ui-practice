======================================= Redux ==================================================
> Redux is a third party library to manage global state.
> Standlone library, but easy to integrate with React apps using react-redux library.
> All global state is stored in one globally accessible store, which is easy to update using "actions" (like useReducer)
> It is conceptually similar to using the Context API + useReducer
> Two versions of Redux : 
                1. Classic Redux
                2. Modern Redux Toolkit



========================= Installing Redux =================================================
npm install redux
===================== Creating a Redux store =================================================
import {createStore} from 'redux';   //deprecated, (we are using classic Redux)

const store = createStore(reducer);
store.dispatch({type: 'account/deposit', payload: 500});

//fetching :
    console.log(store.getState());

=========================================================
----------------- Combining multiple reducers -----------------
import { applyMiddleware, combineReducers, createStore } from "redux";

const rootReducer = combineReducers({
  account: accountReducer,
  customer: customerReducer,
});
const store = createStore(rootReducer);

export default store;

-------------------- dispatching (Setting state) --------------------
const dispatch = useDispatch();

  function handleDeposit() {
    dispatch(deposit(depositAmount));
  }
---------------- Reading state -----------------------------
const customer = useSelector((store) => store.customer.fullName);
console.log(customer);

or 

const {
    balance: currentBalance,
    loan: currentLoan,
    loanPurpose: currentLoanPurpose,
} = useSelector((store) => store.account);

console.log(currentBalance, currentLoan, currentLoanPurpose);

---------------------- Old way of passing props --------------------
function BalanceDisplay({ balance }) { //prop passed to component
  return <div className="balance">{formatCurrency(balance)}</div>;
}

function mapStateToProperties(state) {
  return { balance: state.account.balance }; //name of props to be passed, and value stored to it
}

//Legacy way of connecting Components to Redux
export default connect(mapStateToProperties)(BalanceDisplay);




=========================================================================================
=========================================================================================

--------------------- Redux Middleware and Thunks --------------------
Where to make an aynchronous API call (or any other async operation) in Redux ?
    > Store : There should be any aynchronous operation in store.
              Reducers need to be pure function.
    > component : We can make aynchronous operations and then dispatch.
                  But fetching data in component is not ideal.
    > Middleware : A function that sits between dispatching the action and the store. Allows us to run code after dispathcing, but before dispathcing reaching the reducer in the store.
                   Perfect for asynchronous code.
                   API calls, timers, logging, etc.
                   It is the place for side effects. 
    
----------------- Thunk Middleware ---------------
We use third party package for middleware called Thunk

npm install redux-thunk

in store.js :
import { applyMiddleware } from "redux";
import { thunk } from "redux-thunk";

const store = createStore(rootReducer, applyMiddleware(thunk));



=============================================================================================
============================================================================================
----------------------- Redux Dev Tools --------------------
1. Install Google Chrome extension : Redux DevTools
2. Install corresponding npm package : npm i @redux-devtools/extension 
3. Update store.js : 

    import { composeWithDevTools } from "@redux-devtools/extension";

    const store = createStore(
      rootReducer,
      composeWithDevTools(applyMiddleware(thunk))
    );


====================================================================================================
====================================================================================================
----------------------- Redux Toolkit --------------------
What is Redux Toolkit ?
> The modern and preferred way of writing Redux code.
> An opinionated approach, forcing us to use Redux best practices.
> 100% compatible with "classic" Redux, allowing us to use them together.
> Allows us to write a lot less code to achieve the same result (less boilerplate)
> Gives us 3 big things (but there are many more) :
  1. We can write code that "mutates" state inside resucers (will be converted to immutable logic behind the scenes by "Immer" library)
  2. Action creators are automatically created.
  3. Automatic setup of thunk middleware and DevTools.


------------------ Using Redux Toolkit 
npm i @reduxjs/toolkit 

see accountSlice.js / customerSlice.js in 15-redux-intro section



==================================================================================================
==================================================================================================
-------------------- Redux vs Context API ------------------------
Context API :
    > Build into React
    > Easy to setup single Context
    > Additional state "slice" requires new context setup from scratch ("provider hell" in App.js)
    > No mechanism for async operations
    > Performance optimization is a pain 
    > Only React DevTools

    ----- Usage : when to use
    > Use the Context API for globa; state management in small apps
    > When you just need to share a value that doesn't change oftern {color there, preferred language, authenticated user, ...}
    > When you need to solve a simple prop drilling problem
    > When you need to manage state in a local sub-tree of the app.

Redux :
    > Requires additional package (larger bundle size)
    > More work to setup initially
    > Once set up, it's easy to create additional state "slices"
    > Supports middleware for async operations (Keep in mind that we should not use these solutions for remote state)
    > Performance is optimized out of the box.
    > Excellent DevTools

    ----- Usage : when to use
    > USe Redux for global state management in large apps
    > When you have lots of global UI state that needs to be updated frequently (becuase Redux is optimized for this) {shopping cart, current tabs, complex filters or search, ...}
    > When you have complex state with nested objects and array (because you can mutate state with redux toolkit)
