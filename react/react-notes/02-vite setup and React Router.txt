1. Create project : npm create vite@latest     or    npm create vite@4
2. Hit enter to intall vite package (promped for first vite project)
3. Give project name : worldwise
4. select JS library or framework you want to use : (React)
5. cd to project folder (cd worldwise)
6. install packages : (npm install)
7. Run the project : (npm run dev)
8. open the given localhost in browser : http://localhost:5173/

==================================================================
------------------ Eslint setup for React in Vite ----------------
1. in separate terminal : npm install eslint vite-plugin-eslint eslint-config-react-app  --save-dev
2. Create a file in root folder of project named : .eslintrc.json
3. Configure eslint as following : 
   {
      "extends": "react-app",  (this will inherit all configs of react-app eslint configs)
      "rules": {
         "react/prop-types": "off"
      }
   }
4. Add eslint plugin to the vite.config.js :
    import eslint from "vite-plugin-eslint";   <--- import eslint
    export default defineConfig({
      plugins: [react(), eslint()],   <---- Add (eslint()) here
    });


========================================================================
----------------------- Install React Router --------------------------------
npm install react-router-dom  or   npm i react-router-dom@6 (for this project only)

----------- specifying routes ------------
import { BrowserRouter, Route, Routes } from "react-router-dom";
import Product from "./pages/Product";
import Homepage from "./pages/Homepage";
import Pricing from "./pages/Pricing";

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Homepage />} />
        <Route path="product" element={<Product />} />
        <Route path="pricing" element={<Pricing />} />
        <Route path="*" element={<PageNotFound />} />  <--- for all other wrong URLs
      </Routes>
    </BrowserRouter>
  );
}

export default App;

----------------------- Using React Router --------------------------------
import { Link, NavLink } from "react-router-dom";

   <Link to="/">Home</Link>
   
   //NavLink gives class of 'active' for currently active page
   <NavLink to="/">Home</NavLink>

----------------------- Nested Route and Index Route --------------------------------
   <Route path="app" element={<AppLayout />}>
      <Route path="cities" element={<p>List of Cities</p>} />
      <Route path="countries" element={<p>List of Countries</p>} />
      <Route path="form" element={<p>Form</p>} />
   </Route>

---------------------------------------------------------------
//reading data from query param in route.
  const [searchParams, setSearchParams] = useSearchParams(); //returns an array like useState : we can and set also.
  const lat = searchParams.get("lat"); //searchParams consistes of an object which we need to read using get function.
  const lng = searchParams.get("lng");

------------------------------------------------------------
//reading state data from route.
  const { id } = useParams(); //provided by react router

----------------------------------------------------------------
Setting state variable data in the route , route should not be with / i.e. `/${id}`, that will add to route id 
along with that, setting state variable data through query param 

      <Link to={`${id}?lat=${position.lat}&lng=${position.lng}`}>Any link </Link>

-----------------------------------------------------------------------

Programatic navigation using useNavigate
  const navigate = useNavigate(); // this returns a function that can be used to navigate.

   <div onClick={() => navigate("form")}>

---------------------------------------------------------------

  reading data from query param in route.
  const [searchParams, setSearchParams] = useSearchParams(); //returns an array like useState : we can and set also.
  const mapLat = searchParams.get("lat"); //searchParams consistes of an object which we need to read using get function.
  const mapLng = searchParams.get("lng");

  Setting the queryParam 
      <button onClick={() => setSearchParams({ lat: 50, lng: 23 })}>
        Change Position
      </button>

-------------------------------------------------------------------------


























=====================================================================
=====================================================================

---------------- Styling React App (CSS) --------------------------------
React doesn't care about styling.
Ways we can style our application : 
1. Inline CSS 
   where : JSX elements
   how: style prop
   scope: JSX element
   Based on : CSS 

2. CSS or Sass file
   where : external file
   how: className prop
   scope: Entire app
   Based on : CSS

3. CSS Modules
   where : One external file per component
   how: className prop
   scope: component
   Based on : CSS

4. CSS-in-JS
   where : external file or component file 
   how: creates new component
   scope: component
   Based on : Javascript

5. Utility-first CSS  (tailwind)
   where : JSX element
   how: className prop
   scope: JSX element
   Based on : CSS

6. Use UI libraries like Material UI, Chakra Mantine (No need to write CSS)



=====================================================================
=====================================================================