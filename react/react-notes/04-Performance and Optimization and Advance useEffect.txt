================= Performace Optimization tools ==============================
There are three main areas where we can focus on to optimize Performace

1. Prevent wasted renders :
   memo
   useMemo
   useCallback
   Passing elements as children or regular prop

2. Improve app speed / responsiveness
   useMemo
   useCallback
   useTransition

3. Reduce the bundle size
   Using fewer 3rd party packages
   code splitting and lazy loading

=================================================================================


1. Prevent wasted rendering :
   When does a components instance re-render ?
   -> state changes
   -> context changes
   -> parent re-renders
   \*\* A render does not means that the DOM actually gets updated, it just means the component functions gets called. But this can be expensive operation.

Wasted render : A render that didn't produce any change in the DOM. This is a proble, when they happen too frequently or when the component is too slow.

To overcome this, we can pass slow component as prop or children and use it in parent of slow component to avoid re-render of slowComponent.

========================================================================================================
================================== MEMO ================================================================
What is memoization ?
Optimizatin technique that executes a pure function once and saves the result in memory. If we try to execute the function again with the same arguments as before, the previously saved result will be returned, without executing the function again.

Memoize components with memo 
Memoize objects with useMemo
Memoize function with useCallback

It will help in :
   Prevent wasted renders.
   Improve app speed/responsiveness.


---------- The Memo function ---------------------
Used to create a component that will not re-render when its parent re-renders, as long as the props stay the same between renders.
It only affects props! A memoized component will still re-render when its own state changes or when a context that it's subscribed to changes.
Only makes sense when the component is heavy (slow rendering), re-renders ofter and does so with the same props.

to use memo, just wrap the component in memo() and store in variable, Use that variable as an element.

------------ An issue with memo :
In React, everything is re-created on every render (including objects and functions)
In Javascript, two objects or functions that look the same are actually different ( {} != {})
Therefore, if objects are passed as props, the child component will always see them as new props on each render.
So, if props are different betwwen re-renders, memo will not work.

Solution : We need to memoize the objects and functions, to make them stable (preserve) between re-renders ( memoized {} == memoized {} ).
this can be achieved with useMemo and useCallback


========================================================================================================
================================== useMemo and useCallback =============================================
useMemo : Used to memoize values between renders.
useCallback : Used to memoize functions between renders.

Values passed into useMemo and useCallback will be stored in memory ("cached") and returned in subsequent re-renders, as long as dependencies ("inputs") stay the same.

useMemo and useCallback have a dependency array (like useEffect) : Whenever one dependency changes, the values will be re-created.
----------------------------------------
Three big use cases of useMemo and useCallback :
   1. Memoizing props to prevent wasted renders (together with memo).
   2. Memoizing values to avoid expensive re-calculations on every render.
   3. Memoizing values that are used in dependency array of another hook. 
----------------------------

Memoizing Context APIs : Only Memoize context when below three things are true at the same time.
   1. All the state in the context needs to change all the time.
   2. Context has many consumers
   3. App is actually slow and laggy.





===========================================================================================================
=======================================================================================================================
3. Optimizing bundle size with code splitting.
Bundle : Javascript file containing the entire application code, Downloading the bundle will load the entire app at once, turning it into SPA (Single Page Application)
Bundle Size : Amount of Javascript users have to download to start using the app. One of the most important things thing to be optimized, so the the bundle takes less time to download.
Code splitting : Splitting code into multiple parts that can be downloaded over time ("Lazy loading").



==================================================================================================
=======================================================================================================
------------------------ Don't optimize prematurely ----------------------------------
 Don't optimize anything if there is nothing to optimize.
 


 ============================================================================================================
 ============================================================================================================
 -------------------------- useEffect rules and best practices --------------------------------
 Dependency array rules :
   > Every state variable, props and context value used inside the effect MUST be included in the dependency array.
   > All "reactive values" must be iincluded! That means any function or variable that reference any other reactive value.
   > Do NOT use objects or arrays as dependencies (objects are recreated on each render, and React sees new object as different, {} !== {})
Removing unnecessary dependencies:
   > removing function dependencies: 
      Move function into the effect.
      If you need the function in multiple places, memoize it (useCallback)
      If the function doesn't reference ant reactive values, move it out of the component.
   > Removing object dependencies: 
      Instead of including the entire object, include only the properties you need (primitive values)
      If that doen't work, use the same strategies as for functions (moving or memoizing object)
   > Other strategies:
      If you have multiple related values as dependencies, try using a reducer (useReducer)
      YOu don't need to include setState (from useState) and dispatch (from useReducer) in the dependencies, as React guarantees them to be stable across renders.

When NOT to use an effect -------------------------
   > Effect should be used as a last resprt, when no other solution makes sense. React calls them an "escape hatch" to step outside of React.
   > There cases where effects are overused :
      1. Responding to a user event. An event handler function should be used instead.
      2. Fetching data on a component mount. This is fine in small apps, but in real-world apps, a library like React Query should be used.
      3. Synchronizing state changes with one another (setting state based on another state variable). Try to use derived state and event handlers.