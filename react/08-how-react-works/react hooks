----------------------- REACT HOOKS ---------------------------
React hooks are special built-in functions that allow us to "hook" into React internals :
Creating and accessing state from Fiber tree.
Registering side effects in Fiber tree.
Manual DOM selections.

\*\*They all start with "use" (useState, useEffect, etc...)

Enable easy reusing of non-visual logic: we can compose multiple hooks into our own custom hook.

-------------- Overview of All Built-In Hooks ---------------------------------
---- Most used :
useState
useEffect
useReducer
useContext

---- Less used :
useRef
useCallback
useMemo
useTransition
useDeferredValue

----- not important
useLayoutEffect
useDebugValue
useImperativeHandle
useId

---- only for libraries :
useSyncExternalStore
useInsertionEffect

---------------------------- Rules of Hooks --------------------------------

1. Only call hooks at the top level
   Don't call hooks inside conditionals, loops, nested functions, or after an early return.
   This is necessary to ensure that hooks are always called in same order (hooks rely on this)

   Reason : Whenever an application is rendered, react creats a tree of React Elements (virtual DOM). On initial render reacts also creates the Fiber tree out of the DOM where each element is a Fiber. All the fibres contains a lot of stuff, like the props, a list of work, states and 'a linked list' of hooks that we use in a component instance.

   And not adding hooks on top will destroy or break the linked list.

2. Only call hooks from React functions
   only call hooks inside a function component or a custom hook.
