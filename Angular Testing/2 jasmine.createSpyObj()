//Since this is a unit test we focus on testing the current service, not the Dependency services, So we mock the fake version of Dependency service.
//This also helps if the data in Dependency service are expensive, faking it will prevent original data to be called.

//We should keep actual instance of current service only, any other Dependency service should be mocked the fake implementation

//If we want to test whether a method of Dependency service is called once or more, we use createSpyObj method


describe('CalculatorService', ()=> {

  //Test Specification  --> Added for test case to be executed
  it('Should add two numbers', () => {

    //create fake instance of Dependency service and also pass in main service as constructor
    //first param is service name to be faked and second one is methods containing fake implementation
    const logger = jasmine.createSpyOb('LoggerService', ["log"]);


    const calculator = new CalculatorService(new LoggerService(logger)); //instance of Dependency passed
    const result = calculator.add(2, 2);
    expect(result).toBe(4, "This test case has been failed because add function is not written properly");

    //we can test whether the method of Dependency service called once or more
    expect(logger.log).toHaveBeenCalledTimes(1);
  });

});
