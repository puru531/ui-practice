//.subscribe    .find  .toBeTruthy   .toEqual  .flush

import {CoursesService} from './courses.service';
import {TestBed} from '@angular/core/testing';
import {HttpTestingController, HttpClientTestingModule} from '@angular/core/testing';

describe('CoursesService', ()=> {

    let coursesService: CoursesService,
        httpTestingController: HttpTestingController;

    beforeEach(()=> {
        TestBed.configureTestingModule({
            imports: [HttpClientTestingModule],
            providers: [
                CoursesService
            ]
        });
        coursesService = TestBed.get(CoursesService);
        httpTestingController = TestBed.get(HttpTestingController)
    });


    it('should retrieve all courses', ()=>{
        coursesService.findAllCourses
            .subscribe(courses => {
            
            expect(courses).toBeTruthy('No courses returned.');
            expect(courses.length).toBe(12,"Incorrect number of courses!");

            const course = courses.find(course => course.id==12);
            expect(course.title.description).toBe("Angular Testing Course")

        });

        const req = httpTestingController.expectOne('/api/courses');
        expect(req.request.method).toEqual('GET');
        req.flush({payload: Object.values(COURSES)});
    });


    it('should find course by id', ()=>{
        coursesService.findCourceById(12).subscribe(course => {
            expect(course).toBeTruthy();
            expect(course.id).toBe(12);
        });

        const req = httpTestingController.expectOne('/api/courses/12');
        expect(req.request.method).toEqual('GET');
        req.flush(COURSES[12]);   
    });


    it('should save the course data', ()=>{

        const changes : Partial<course> = {titles:{description: 'Testing course'}};
        //here saveCourse method is taking two parameters
        coursesService.saveCourse(12, changes).subscribe(course => {
            expect(course.id).toEqual(12);
        });

        const req = httpTestingController.expectOne('/api/courses/12');
        expect(req.request.method).toEqual('PUT');
        expect(req.request.body.titles.description).toEqual(changes.title.description);
        
        req.flush({
            ...COURSES[12],
            ...changes
        }); 
    });


    //afterEach will add the code to the last of each test specification
    afterEach(() =>{
        //verify the http request is made by same service which is being tested
        httpTestingController.verify();
    });
    
});