//.subscribe    .find  .toBeTruthy   .toEqual  .flush

import {CoursesService} from './courses.service';
import {TestBed} from '@angular/core/testing';
import {HttpTestingController, HttpClientTestingModule} from '@angular/core/testing';

describe('CoursesService', ()=> {

    let coursesService: CoursesService,
        httpTestingController: HttpTestingController;

    beforeEach(()=> {
        TestBed.configureTestingModule({
            //Coursesservice has dependency of HTTPClient which when called original will cause issue so we are mov=cking it.
            //This Testing http client will replace the actual http client and allow test to be performed
            imports: [HttpClientTestingModule],
            providers: [
                CoursesService
            ]
        });
        coursesService = TestBed.get(CoursesService);
        httpTestingController = TestBed.get(HttpTestingController)
    });

    it('should retrieve all courses', ()={
        //find all courses is going to return an observable so we need to subscribe it.
        //And this observable is going to emit the values which contain list courses so we pass that as parameter to subscribe
        coursesService.findAllCourses
            .subscribe(courses => {
            
            //Test asserion that we are getting the courses
            expect(courses).toBeTruthy('No courses returned.');
            expect(courses.length).toBe(12,"Incorrect number of courses!");

            //Checking whether we are getting correct data  (.find to find the id of courses getting stored in course)
            const course = courses.find(course => course.id==12);
            expect(course.title.description).toBe("Angular Testing Course")

        });
        //We ha ve not yet described how findAllCourses is going to return all courses data.
        //To do that we need to use AngularHttpController
        //API of HttpTestingController --> checking how many times http request is done by our service. --> Storing in variable to check that it should be get request
        const req = httpTestingController.expectOne('/api/courses');

        //checking the request type should be get
        expect(req.request.method).toEqual('GET');

        //Which test data should our mock http client implementation be whenever we call /api/courses url
        //flush method to pass some test data to our mock request    --> argument passed in flush call is test data returned by mock  request
        req.flush({payload: Object.values(COURSES)});
    });

});